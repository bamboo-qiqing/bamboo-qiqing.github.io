import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c,a as e,b as l,w as a,e as r,r as d,d as n}from"./app.b354d91e.js";const m={},s=r('<h1 id="客户端开发向导" tabindex="-1"><a class="header-anchor" href="#客户端开发向导" aria-hidden="true">#</a> 客户端开发向导</h1><p>RabbitMQ 客户端使用 <code>com.rabbitmq.client</code> 作为顶级包名，关键的 Class 和 Interface 有：</p><ul><li>Channel：AMQP 协议层面的操作通过 Channel 接口实现</li><li>Connection：用来开启 Channel，可以出则事件处理器，也可以在应用结束时关闭连接</li><li>ConnectionFactory</li><li>Consumer</li></ul><p>等类。</p><p>与 RabbitMQ 相关的开发工作，基本上也是围绕 Connection 和 Channel 展开的。</p><p>本章按照一个完整的运转流程进行讲解，详细内容有：</p>',6);function u(b,_){const t=d("RouterLink");return i(),c("div",null,[s,e("ul",null,[e("li",null,[l(t,{to:"/code/rabbitmq/03/01.html"},{default:a(()=>[n("连接 RabbitMQ")]),_:1})]),e("li",null,[l(t,{to:"/code/rabbitmq/03/02.html"},{default:a(()=>[n("交换器/队列的创建与绑定")]),_:1})]),e("li",null,[l(t,{to:"/code/rabbitmq/03/03.html"},{default:a(()=>[n("发送消息")]),_:1})]),e("li",null,[l(t,{to:"/code/rabbitmq/03/04.html"},{default:a(()=>[n("消费消息")]),_:1})]),e("li",null,[l(t,{to:"/code/rabbitmq/03/05.html"},{default:a(()=>[n("消费消息的确认")]),_:1})]),e("li",null,[l(t,{to:"/code/rabbitmq/03/06.html"},{default:a(()=>[n("关闭连接")]),_:1})])])])}const p=o(m,[["render",u],["__file","index.html.vue"]]);export{p as default};
