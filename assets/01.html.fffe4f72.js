import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as t}from"./app.b354d91e.js";const p="/assets/image-20200624141512703.dfdbe5f3.png",e="/assets/image-20200624145335132.06cbfd0f.png",o={},c=t(`<h1 id="消息何去何从" tabindex="-1"><a class="header-anchor" href="#消息何去何从" aria-hidden="true">#</a> 消息何去何从</h1><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">void</span> <span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">String</span> exchange<span class="token punctuation">,</span> <span class="token class-name">String</span> routingKey<span class="token punctuation">,</span> <span class="token keyword">boolean</span> mandatory<span class="token punctuation">,</span> <span class="token keyword">boolean</span> immediate<span class="token punctuation">,</span> <span class="token class-name">BasicProperties</span> props<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>mandatory 和 immediate 他们都有当消息传递过程中不可达目的地时将消息 <strong>返回给生产者</strong> 的功能。</p><p>RabbitMQ 提供的 <strong>备份交换器（Alternate Exchange）</strong> 可以将 <strong>未能被交换器路由</strong>（没有绑定队列或没有匹配的队列） 的消息存储起来，而不用返回给客户端</p><p>那么 mandatory 、immediate 、备份交换器 他们到底是什么？有啥区别？本章就来聊一聊</p><h2 id="mandatory-参数" tabindex="-1"><a class="header-anchor" href="#mandatory-参数" aria-hidden="true">#</a> mandatory 参数</h2><p>结论：</p><ul><li>true：找不到匹配的队列，会将消息返回给生产者</li><li>false：找不到匹配的队列，直接丢弃</li></ul><p>交换器无法根据自身的类型和路由键找到一个符合条件的队列，将消息返回给生产者（Basic.Return 命令），那么生产者可以通过添加 ReturnListenner 监听器来获取被退回的消息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returntest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">EXCHANGE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;exchange_demo&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ROUTING_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;routingky_demo&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;queue_demo&quot;</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建一个 type=direct 持久化、非自动删除的交换器</span>
        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE_NAME</span><span class="token punctuation">,</span> <span class="token string">&quot;direct&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建一个：持久化、非排他的、非自动删除的队列</span>
        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将交换器与队列通过 路由键 绑定</span>
        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span> <span class="token constant">EXCHANGE_NAME</span><span class="token punctuation">,</span> <span class="token constant">ROUTING_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        channel<span class="token punctuation">.</span><span class="token function">addReturnListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReturnListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleReturn</span><span class="token punctuation">(</span><span class="token keyword">int</span> replyCode<span class="token punctuation">,</span>
                                     <span class="token class-name">String</span> replyText<span class="token punctuation">,</span>
                                     <span class="token class-name">String</span> exchange<span class="token punctuation">,</span>
                                     <span class="token class-name">String</span> routingKey<span class="token punctuation">,</span>
                                     <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span>
                                     <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;replyCode=&quot;</span> <span class="token operator">+</span> replyCode <span class="token operator">+</span>
                        <span class="token string">&quot; ; replyText=&quot;</span> <span class="token operator">+</span> replyText <span class="token operator">+</span>
                        <span class="token string">&quot; ; exchange=&quot;</span> <span class="token operator">+</span> exchange <span class="token operator">+</span>
                        <span class="token string">&quot; ; routingKey=&quot;</span> <span class="token operator">+</span> routingKey
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Basic.Return 返回未路由的消息：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 发送的时候，没有指定 ROUTING_KEY</span>
        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE_NAME</span><span class="token punctuation">,</span>
                <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span><span class="token constant">PERSISTENT_TEXT_PLAIN</span><span class="token punctuation">,</span>
                <span class="token string">&quot;mandatory test&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的信息为</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>replyCode=312 ; replyText=NO_ROUTE ; exchange=exchange_demo ; routingKey=xx
Basic.Return 返回未路由的消息：mandatory test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 AMQP 协议层面来说，过程如下</p><p><img src="`+p+`" alt="image-20200624141512703"></p><h2 id="immediate-参数" tabindex="-1"><a class="header-anchor" href="#immediate-参数" aria-hidden="true">#</a> immediate 参数</h2><p>结论：为 true 时：如果交换器在将消息路由到队列时，发现 <strong>队列上并不存在任何消费者</strong>，那么该 <strong>消息将不会存入队列中</strong>。当与路由键匹配的所有队列都没有消费者时，会通过 Basic.Return 返回给生产者。</p><p>mandatory 与 immediate 在功能上区别：</p><ul><li>mandatory ：要求消息至少被路由到一个队列中，要么丢弃、要么返回给生产者</li><li>immediate：要求至少有一个订阅者，否则就返回给生产者。</li></ul><p><strong>注意：RabbitMQ 3.+ 版本不再对此标记支持</strong>，官方解释：该参数会影响镜像队列的性能，增加代码复杂性。建议采用 TTL 和 DLX 的方法替代（TTL 和 DLX 后续讲解）</p><h2 id="备份交换器" tabindex="-1"><a class="header-anchor" href="#备份交换器" aria-hidden="true">#</a> 备份交换器</h2><p>Alternate Exchange 简称 AE，如果设置 <code>mandatory = false</code> ，未被路由的消息会被丢弃，设置为 <code>mandatory = true</code> 则需要生产者自己接收未被路由的消息。</p><p>如果不想丢失消息，又不想自己立即接收处理这些消息，则可以使用这个备份交换器，<strong>在需要的时候再去处理</strong> 这些消息</p><p>可以通过两种方式实现：</p><ol><li>可以在声明交换器时，增加 <code>alternate-exchange</code> 参数实现</li><li>可以通过策略（Policy，后续章节讲解）</li></ol><p>如果两种方式同时使用，前者的优先级更高，会覆盖掉 Policy 的设置。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义备份交换器</span>
channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;myAe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fanout&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;unroutedQueue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span><span class="token string">&quot;unroutedQueue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;myAe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;alternate-exhcange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;myAe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用备用交换器 myAe</span>
channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;normalExchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;direct&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;normalQueue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span>queueBind<span class="token string">&quot;normalQueue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;normalExchange&quot;</span><span class="token punctuation">,</span> <span class="token constant">ROUTING_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面定义了两个交换器和队列，通过 <code>alternate-exhcange</code> 参数来指定哪一个是备用交换器；过程如下图所示</p><p><img src="`+e+'" alt="image-20200624145335132"></p><p>其实可以看到备用交换器和普通的交换器没有太大的区别。建议设置为 fanout 类型（广播到订阅到交换器的队列中），因为：消息被重新发送到备用交换器，<strong>路由键还存在</strong>，而 fanout 类型的交换器则会忽略路由键，能确保消息被进入到备用交换器的队列中。</p><p>对于备份交换器，总结了以下几种特殊情况：</p><ul><li>如果设置的备份交换器不存在，客户端和 RabbitMQ 服务端都不会有异常出现，此时消息会丢失。</li><li>如果备份交换器没有绑定任何队列，不会有异常，此时消息会丢失</li><li>如果备份交换器没有任何匹配的队列，不会有异常，此时消息会丢失</li><li>如果备份交换器与 <strong>mandatory 参数一起使用，那么该参数无效</strong></li></ul>',31),l=[c];function u(i,k){return s(),a("div",null,l)}const m=n(o,[["render",u],["__file","01.html.vue"]]);export{m as default};
