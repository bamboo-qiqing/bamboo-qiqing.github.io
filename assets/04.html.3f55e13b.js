import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e}from"./app.b354d91e.js";const p={},t=e(`<h1 id="消费消息" tabindex="-1"><a class="header-anchor" href="#消费消息" aria-hidden="true">#</a> 消费消息</h1><p>RabbitMQ 消费模式分两种：</p><ul><li><p>Push：推模式</p><p>采用 Basic.Consume 进行消费</p></li><li><p>Pull：拉模式</p><p>则使用 Basic.Get 进行消费</p></li></ul><h2 id="推模式" tabindex="-1"><a class="header-anchor" href="#推模式" aria-hidden="true">#</a> 推模式</h2><p>在推模式中，可以通过持续订阅的方式来消费消息，相关消费类如下：</p><ul><li><code>com.rabbitmq.client.DefaultConsumer</code></li><li><code>com.rabbitmq.client.Consumer</code></li></ul><p>接收消息，一般实现 Consumer 接口，或则继承 DefaultConsumer 来实现。</p><p>推模式的关键代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> autoAck <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token comment">// 设置客户端最多接收未被 ack 的消息个数</span>
channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span> autoAck<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span>
                               <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span>
                               <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span>
                               <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> routingKey <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getRoutingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">String</span> contentType <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 处理消息</span>
        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>consumerTag：不同的订阅有不同的标签</li><li>autoAck：在订阅队列时，设置了 false，在接收处理消息后，显示的 ack 操作。可以防止消息不必要的丢失</li></ul><p>basicConsume 的全参数说明如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token class-name">String</span> queue<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoAck<span class="token punctuation">,</span> <span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> noLocal<span class="token punctuation">,</span> <span class="token keyword">boolean</span> exclusive<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments<span class="token punctuation">,</span> <span class="token class-name">Consumer</span> callback<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>queue：订阅的队列名称</li><li>autoAck：是否自动确认，建议设置成 false</li><li>consumerTag：消费者标签，用来区分多个消费者</li><li>noLocal：设置为 true，则表示不能将同一个 Connection 中生产者发送的消息传送给这个 Connection 中的消费者</li><li>exclusive：是否排他</li><li>arguments：消费者的其他参数</li><li>callback：回调函数。用来处理 RabbitMQ 推送过来的消息。</li></ul><p>实现回调函数时，重新 handleDelivery 方法，对客户端消费者来说很方便。更复杂的消费者客户端会重新更多的方法。</p><ul><li><p><code>void handleConsumeOk(String consumerTag);</code></p><p>会在其他方法之前调用，返回消费者标签</p></li><li><p><code>void handleCancelOk(String consumerTag);</code></p><p>显示的取消一个消费者订阅时被调用，比如调用 <code>channel.basicCancel(consumerTag)</code>，该 basicCancel 方法，触发顺序是： handleConsumeOk、handleDelivery 、handleCancelOk</p></li><li><p><code>void handleCancel(String consumerTag) throws IOException;</code></p><p>隐式的取消消费者订阅时调用。</p></li><li><p><code>void handleShutdownSignal(String consumerTag, ShutdownSignalException sig);</code></p><p>当 Channel 或则 Connection 关闭时调用</p></li><li><p><code>void handleRecoverOk(String consumerTag);</code></p></li></ul><p>和生产者一样，建议每个线程拥有自己的 Channel ，不要线程共享。业务是线程不安全的。</p><h2 id="拉模式" tabindex="-1"><a class="header-anchor" href="#拉模式" aria-hidden="true">#</a> 拉模式</h2><p>拉模式是通过以下方式主动获取消息，消费消息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 同样还是 channel 类</span>
<span class="token class-name">GetResponse</span> <span class="token function">basicGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> queue<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoAck<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>queue：队列名称</li><li>autoAck：如果设置为 false，则需要调用 channel.basicAck 来确认消息被消费</li></ul><p>如下面的消费示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">final</span> <span class="token class-name">GetResponse</span> response <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">basicGet</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getEnvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意是：basicGet 是一次获取一条消息，而推模式可以通过 <code>channel.basicQos(3);</code> 设置一次让服务器发送多少条消息。所以不要在循环中使用拉模式，这严重影响性能。</p>`,23),c=[t];function o(l,i){return s(),a("div",null,c)}const d=n(p,[["render",o],["__file","04.html.vue"]]);export{d as default};
