import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as t}from"./app.b354d91e.js";const p="/assets/image-20200624163515137.934221cb.png",e="/assets/image-20200624165257741.8cd66872.png",o={},c=t(`<h1 id="死信队列" tabindex="-1"><a class="header-anchor" href="#死信队列" aria-hidden="true">#</a> 死信队列</h1><p>Dead Letter Exchange 简称 DLX，可称为死信交换器，当消息在一个 <strong>队列中变成死信（dead message）<strong>之后，它能</strong>被重新发送到另一个交换器中</strong>，这个交换器就是 <strong>DLX</strong>，绑定在 DLX 上的队列就称为 <strong>死信队列</strong>。</p><p>消息变成死信一般有以下几种情况：</p><ul><li><p>消息被拒绝，并设置 requeue 参数未 false</p><p><code>Basic.Reject 或 Basic.Nack</code></p></li><li><p>消息过期</p></li><li><p>队列达到最大长度</p></li></ul><p>DLX 是一个普通的交换器，可以在任何队列上设置，当死信消息出现时，RabbitMQ 自动将这个 <strong>消息重新发布到设置的 DLX 上</strong>，从而被路由到另一个队列，即 <strong>死信队列</strong></p><p>在队列定义时，使用 <code>x-dead-letter-exchange</code> 参数来为这个队列添加 DLX</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 定义 dlx</span>
channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;exchange.dlx&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;direct&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 定义 dlx queue</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;queue.dlx&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span><span class="token string">&quot;queue.dlx&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;exchange.dlx&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dlx-routing-key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 定义正常的交换器</span>
channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;exchange.normal&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fanout&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 定义队列事，通过该属性给该队列设置 DLX</span>
arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-exchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;exchange.dlx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 还可以通过该属性重新消息的路由键，否则使用原消息的路由键</span>
arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-routing-key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dlx-routing-key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置该队列的 ttl</span>
arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-message-ttl&quot;</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;queue.normal&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span><span class="token string">&quot;queue.normal&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;exchange.normal&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码分为两部分：</p><ol><li><p>定义一个 DLX（其实就是普通的交换器），但是会把他绑定在正常的交换器上；</p><p>为该 DLX 绑定一个队列，用来接收死信消息</p></li><li><p>定义正常的交换器，并设置 DLX 交换器与路由键</p></li></ol><p>在 web 管理界面中如下图所示：</p><p><img src="`+p+'" alt="image-20200624163515137"></p><ul><li>D：durable 持久化队列</li><li>TTL：消息有过期时间</li><li>DLX：绑定了死信交换器</li><li>DLK：是这个 <code>x-dead-letter-routing-key</code> 死信交换器设置了路由键</li></ul><p>一条消息过期时，就如下图所示，被转发到 DLX 交换器中</p><p><img src="'+e+'" alt="image-20200624165257741"></p><p>对于 RabbitMQ 来说， DLX 是非常有用的一个特性。还可以配合 TTL 实现延迟队列的功能。下一节讲解</p>',15),l=[c];function u(i,k){return s(),a("div",null,l)}const g=n(o,[["render",u],["__file","03.html.vue"]]);export{g as default};
