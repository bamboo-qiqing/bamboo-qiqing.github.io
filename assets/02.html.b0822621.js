import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,e}from"./app.b354d91e.js";const t="/assets/image-20200623185140110.cbdadd2d.png",p={},c=e(`<h1 id="使用交换器和队列" tabindex="-1"><a class="header-anchor" href="#使用交换器和队列" aria-hidden="true">#</a> 使用交换器和队列</h1><p>交换器和队列再 AMQP 中高层面的构建模块，应用程序需确保在使用他们的时候，就已经存在了，在使用之前需要先声明（declare）他们</p><p>创建临时队列：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE_NAME</span><span class="token punctuation">,</span> <span class="token string">&quot;direct&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token constant">EXCHANGE_NAME</span><span class="token punctuation">,</span> routingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面创建一个持久化的、绑定类型为 direct 的交换器，同时也创建了一个非持久化的、排他的、自动删除的队列（队列名称由 RabbitMQ 自动生成）。这里交换器和队列没有设置特殊的参数。</p><p>上面展示了：如何使用路由键将队列和交换器绑定起来。上面自动生成的队列具有特性：在在该 Connection 可用，同一个 Connection 的不同 Channel 可共用，在 Connection 断开时，会自动删除该队列。</p><p>想要在应用中共享一个队列，可用创建持久化队列</p><p>创建持久化队列：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE_NAME</span><span class="token punctuation">,</span> <span class="token string">&quot;direct&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token constant">EXCHANGE_NAME</span><span class="token punctuation">,</span> routingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分配一个固定的队列名称，并设置持久化、非排他的、非自动删除的队列。</p><p><strong>生产者和消费者都可以声明一个交换器或则队列</strong>，如果尝试声明一个已经存在的交换器或队列（只要声明的参数完全匹配已存在的交换器或队列），RabbitMQ 则什么都不做，直接返回成功。<strong>如果参数不匹配则会抛出异常</strong>。</p><h2 id="exchangedeclare-方法详解" tabindex="-1"><a class="header-anchor" href="#exchangedeclare-方法详解" aria-hidden="true">#</a> exchangeDeclare 方法详解</h2><p>声明创建一个交换器</p><p>该方法有多个重载方法，都是由转调下面这个方法的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Exchange<span class="token punctuation">.</span>DeclareOk</span> <span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token class-name">String</span> exchange<span class="token punctuation">,</span> <span class="token class-name">String</span> type<span class="token punctuation">,</span>
                                          <span class="token keyword">boolean</span> durable<span class="token punctuation">,</span>
                                          <span class="token keyword">boolean</span> autoDelete<span class="token punctuation">,</span>
                                          <span class="token keyword">boolean</span> internal<span class="token punctuation">,</span>
                                          <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回 Exchange.DeclareOk 标识成功声明了一个交换器</p><ul><li><p>exchange：交换器名称</p></li><li><p>type：交换器类型；常见的有：fanout、direct、topic...</p><p><code>com.rabbitmq.client.BuiltinExchangeType </code> 类定义了交换器类型</p></li><li><p>durable：是否持久化</p><p>持久化将交换器存盘，服务重启时不会丢失相关信息</p></li><li><p>autoDelete：是否自动删除</p><p>自动删除的前提是：<strong>至少有一个队列或则交换器与这个交换器绑定，之后所有与这个交换器绑定的队列或则交换器都与此解绑</strong>。</p><p>**注意：**这里自动删除，不是当连接断开时，自动删除这个交换器。</p><p>确定是这个意思吗？看 API 描述，当服务器不使用时自动删除</p></li><li><p>internal：是否内置的</p><p>如果是内置的交换器，<strong>客户端程序无法直接发送消息到这个交换器</strong> 中，<strong>只能通过交换器路由</strong> 到交换器这种方式。</p></li><li><p>arguments：其他一些结构化参数</p><p>第 4 章会讲解</p></li></ul><h3 id="exchangedeclarenowait" tabindex="-1"><a class="header-anchor" href="#exchangedeclarenowait" aria-hidden="true">#</a> exchangeDeclareNoWait</h3><p>还有一个与之对应的 noWait 的方法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>    void exchangeDeclareNoWait<span class="token punctuation">(</span>String exchange,
        BuiltinExchangeType type,
        boolean durable,
        boolean autoDelete,
        boolean internal,
        Map<span class="token operator">&lt;</span>String, Object<span class="token operator">&gt;</span> arguments<span class="token punctuation">)</span> throws IOException<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>nowait 参数是 AMQP 中 <code>Exchange.Declare</code> 命令的参数，意思是不需要服务器返回，注意该参数的返回值是 void。</p><p>考虑一个场景：在声明完一个交换器后（实际服务器还未完成交换器的创建），那么此时客户端就使用这个交换器，必然会发生异常。所以，如果没有特殊的应用场景，不建议使用该方法。</p><h3 id="exchangedeclarepassive" tabindex="-1"><a class="header-anchor" href="#exchangedeclarepassive" aria-hidden="true">#</a> exchangeDeclarePassive</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">Exchange<span class="token punctuation">.</span>DeclareOk</span> <span class="token function">exchangeDeclarePassive</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用来监测交换器是否存在。如果不存在则抛出异常 <code>404 channel exception</code>，同时 Channel 也会被关闭</p><h2 id="exchangedelete-方法详解" tabindex="-1"><a class="header-anchor" href="#exchangedelete-方法详解" aria-hidden="true">#</a> exchangeDelete 方法详解</h2><p>删除交换器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">exchangeDeleteNoWait</span><span class="token punctuation">(</span><span class="token class-name">String</span> exchange<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ifUnused<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>exchange：交换器名称</li><li>isUnused：设置为 true ，则只有交换器没有被使用时，才被删除。</li></ul><h2 id="queuedeclare-方法详解" tabindex="-1"><a class="header-anchor" href="#queuedeclare-方法详解" aria-hidden="true">#</a> queueDeclare 方法详解</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Queue<span class="token punctuation">.</span>DeclareOk</span> <span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token class-name">String</span> queue<span class="token punctuation">,</span> <span class="token keyword">boolean</span> durable<span class="token punctuation">,</span> <span class="token keyword">boolean</span> exclusive<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoDelete<span class="token punctuation">,</span>
                             <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">queueDeclareNoWait</span><span class="token punctuation">(</span><span class="token class-name">String</span> queue<span class="token punctuation">,</span> <span class="token keyword">boolean</span> durable<span class="token punctuation">,</span> <span class="token keyword">boolean</span> exclusive<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoDelete<span class="token punctuation">,</span>
                        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>queue：队列名称</p></li><li><p>durable：是否持久化</p></li><li><p>exclusive：是否排他</p><p>当一个队列被声明为排他队列，该队列 <strong>仅对首次声明它</strong> 的连接可见，并在连接断开时自动删除。</p><p>这里需要注意一点：就算是持久化的，一旦连接关闭，这个排他队列也会被自动删除。</p><p>适合场景：使用一个客户端同时发送和读取消息</p></li><li><p>autoDelete：是否自动删除</p><p>与交换器定义一致；</p></li><li><p>arguments：设置队列的其他一些参数</p><p>如 <code>x-message-ttl</code>、<code>x-expires</code>、<code>x-max-length</code>、<code>x-max-length-bytes</code>、<code>x-dead-letter-exchange</code>、<code>x-dead-letter-routing-key</code>、<code>x-max-priority</code></p></li></ul><div class="custom-container tip"><p class="custom-container-title">注意</p><p>生产者和消费者都可以使用 queueDeclare 声明一个队列，但是如果消费者已经在该 Channel 上订阅了另外一个队列，则无法再声明队列了，需要先取消订阅，然后将 Channel 设置为「传输」模式后，才能声明队列</p></div><h2 id="queuedelete-方法详解" tabindex="-1"><a class="header-anchor" href="#queuedelete-方法详解" aria-hidden="true">#</a> queueDelete 方法详解</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Queue<span class="token punctuation">.</span>DeleteOk</span> <span class="token function">queueDelete</span><span class="token punctuation">(</span><span class="token class-name">String</span> queue<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ifUnused<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ifEmpty<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>前面与交换器一直，ifEmpty 则表示当队列为空（队列里没有消息）时才能删除。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 清空队列中的内容，不是删除队列本身</span>
<span class="token class-name">Queue<span class="token punctuation">.</span>PurgeOk</span> <span class="token function">queuePurge</span><span class="token punctuation">(</span><span class="token class-name">String</span> queue<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="queuebind-方法详解" tabindex="-1"><a class="header-anchor" href="#queuebind-方法详解" aria-hidden="true">#</a> queueBind 方法详解</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Queue<span class="token punctuation">.</span>BindOk</span> <span class="token function">queueBind</span><span class="token punctuation">(</span><span class="token class-name">String</span> queue<span class="token punctuation">,</span> <span class="token class-name">String</span> exchange<span class="token punctuation">,</span> <span class="token class-name">String</span> routingKey<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>queue：队列名</li><li>exchange：交换器名称</li><li>routingKey：用来绑定队列和交换器的路由键</li><li>arguments：定义绑定的一些参数</li></ul><p>还可以进行解绑</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">Queue<span class="token punctuation">.</span>UnbindOk</span> <span class="token function">queueUnbind</span><span class="token punctuation">(</span><span class="token class-name">String</span> queue<span class="token punctuation">,</span> <span class="token class-name">String</span> exchange<span class="token punctuation">,</span> <span class="token class-name">String</span> routingKey<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="exchangebind" tabindex="-1"><a class="header-anchor" href="#exchangebind" aria-hidden="true">#</a> exchangeBind</h2><p>将交换器与交换器绑定</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Exchange<span class="token punctuation">.</span>BindOk</span> <span class="token function">exchangeBind</span><span class="token punctuation">(</span><span class="token class-name">String</span> destination<span class="token punctuation">,</span> <span class="token class-name">String</span> source<span class="token punctuation">,</span> <span class="token class-name">String</span> routingKey<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>绑定之后，消息从 source 交换器转发到 destination 交换器。示例代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;source&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;direct&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;destination&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fanout&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">exchangeBind</span><span class="token punctuation">(</span><span class="token string">&quot;destination&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;source&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;exKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">&quot;queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;source&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;exKey&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;exToExDemo&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+t+`" alt="image-20200623185140110"></p><p>其实把交换器当成了一个中间转发。</p><p>解绑交换器与交换器的绑定</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Exchange<span class="token punctuation">.</span>UnbindOk</span> <span class="token function">exchangeUnbind</span><span class="token punctuation">(</span><span class="token class-name">String</span> destination<span class="token punctuation">,</span> <span class="token class-name">String</span> source<span class="token punctuation">,</span> <span class="token class-name">String</span> routingKey<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="何时创建" tabindex="-1"><a class="header-anchor" href="#何时创建" aria-hidden="true">#</a> 何时创建</h2><p>RabbitMQ 的消息存储在队列中，交换器的使用并不真正耗费服务器的性能，而队列会。如果要衡量 RabbitMQ 当前的 QPS，只需要看队列即可。在实际业务应用中，需要对锁创建的队列的流量、内存占用及网卡占用有一个清晰的认知，预估平均值和峰值，以便在固定硬件资源的情况下进行合理有效的分配。</p><p>按照 RabbitMQ· 官方建议，生产者和消费者都应该尝试创建（声明操作）队列。如果你的架构设计能保证队列再使用时就已经被创建好了，则不用遵循该建议。</p>`,54),o=[c];function l(u,i){return a(),s("div",null,o)}const k=n(p,[["render",l],["__file","02.html.vue"]]);export{k as default};
