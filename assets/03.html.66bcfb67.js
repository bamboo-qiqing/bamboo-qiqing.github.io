import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as s,e as n}from"./app.b354d91e.js";const t="/assets/image-20200630163956862.9074ba8c.png",i={},l=n(`<h1 id="参数及策略" tabindex="-1"><a class="header-anchor" href="#参数及策略" aria-hidden="true">#</a> 参数及策略</h1><p>RabbitMQ 绝大多数的配置都可以通过 rabbitmq.config 配置文件完成，配置后需要重启 RabbitMQ 服务，对于不需要重启的就可以生效的配置，被称为 <strong>参数（Parameter）</strong>，也可以称为 <strong>运行时参数（Runtime Parameter）</strong></p><p>Parameter 可以通过 rabbitmqctl 或则 RabbitMQ Management 插件提供的 HTTP API 接口来设置。</p><p>有两种类型的 Parameter：</p><ul><li>vhost 级别：</li><li>global 级别：</li></ul><h2 id="vhost-级别" tabindex="-1"><a class="header-anchor" href="#vhost-级别" aria-hidden="true">#</a> vhost 级别</h2><p>操作有三个命令</p><ul><li>set_parameter</li><li>list_parameter</li><li>clear_parameter</li></ul><h3 id="set-parameter" tabindex="-1"><a class="header-anchor" href="#set-parameter" aria-hidden="true">#</a> set_parameter</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl set_parameter <span class="token punctuation">[</span>-p vhost<span class="token punctuation">]</span> <span class="token punctuation">{</span>component_name<span class="token punctuation">}</span> <span class="token punctuation">{</span>name<span class="token punctuation">}</span> <span class="token punctuation">{</span>value<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如下面这个演示</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 别管这个是什么，因为现在不讲，只看语法。值是  JSON 格式</span>
rabbitmqctl set_parameter federation-upstream f1 <span class="token string">&#39;{&quot;uri&quot;:&quot;amqp&quot;}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="list-parameter" tabindex="-1"><a class="header-anchor" href="#list-parameter" aria-hidden="true">#</a> list_parameter</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl list_parameter <span class="token punctuation">[</span>-p vhost<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="clear-parameter" tabindex="-1"><a class="header-anchor" href="#clear-parameter" aria-hidden="true">#</a> clear_parameter</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl clear_parameter <span class="token punctuation">[</span>-p vhost<span class="token punctuation">]</span> <span class="token punctuation">{</span>component_name<span class="token punctuation">}</span> <span class="token punctuation">{</span>name<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="global-级别" tabindex="-1"><a class="header-anchor" href="#global-级别" aria-hidden="true">#</a> global 级别</h2><p>也有对应的三个命令：set、clear、list</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl set_global_parameter name value
rabbitmqctl list_global_parameter
rabbitmqctl clear_global_parameter name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="policy" tabindex="-1"><a class="header-anchor" href="#policy" aria-hidden="true">#</a> Policy</h2><p>除了一些固定的参数，如：durable、exclusive，客户端在创建交换器或则队列时，可以配置一些可选的属性来获得一些不同的功能，如：<code>x-message-ttl</code>、<code>x-expires</code> 等。通过客户端设置这些属性，一旦 <strong>设置成功就不能再修改</strong> 了，除非删除原来的交换器或队列之后，重建。</p><p>Policy 就可以解决这类的问题，它是一种 <strong>特殊的 Parameter</strong> 的用法，是 <strong>vhost 级别</strong> 的。一个 Policy 可以匹配一个或则多个队列、交换器，<strong>便于批量管理</strong></p><p>Policy 也可以 <strong>支持动态修改一些属性参数</strong>，一般来说，Policy 用来配置 Federation、镜像、备份交换器、死信等功能。</p><p>rabbitmq_managemet 插件提供了对 Policy 的支持。在 <code>admin/Policies/Add / update a policy</code> 中可以添加或修改 Policy</p><p><img src="`+t+`" alt="image-20200630163956862"></p><ul><li><p>Pattern：一个正则表达式，用来匹配相关的队列或则交换器</p></li><li><p>Apply to：用来指定与匹配的目标</p><ul><li>Exchanges and queues</li><li>Queues</li><li>Exchanges</li></ul></li><li><p>Priority：优先级</p><p>如果有多个 Policy 匹配到同一个目标，则优先级最大的生效。如果相同，则最后的生效</p></li><li><p>Definition：定义一组或则多组键值对，为匹配的交换器或队列附加相应的功能。</p></li></ul><h3 id="set-policy" tabindex="-1"><a class="header-anchor" href="#set-policy" aria-hidden="true">#</a> set_policy</h3><p>Policy 也可以通过 rabbitmqctl 工具或则 HTTP API 接口来操作。语法如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl set_policy <span class="token punctuation">[</span>-p vhost<span class="token punctuation">]</span> <span class="token punctuation">[</span>--prority priority<span class="token punctuation">]</span> <span class="token punctuation">[</span>--apply-to applyto<span class="token punctuation">]</span> <span class="token punctuation">{</span>name<span class="token punctuation">}</span> <span class="token punctuation">{</span>pattern<span class="token punctuation">}</span> <span class="token punctuation">{</span>definition<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="list-policies" tabindex="-1"><a class="header-anchor" href="#list-policies" aria-hidden="true">#</a> list_policies</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl list_policies <span class="token punctuation">[</span>-p vhost<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="clear-polic" tabindex="-1"><a class="header-anchor" href="#clear-polic" aria-hidden="true">#</a> clear_polic</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl clear_polic <span class="token punctuation">[</span>-p vhost<span class="token punctuation">]</span> <span class="token punctuation">{</span>name<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,33),r=[l];function c(p,o){return e(),s("div",null,r)}const h=a(i,[["render",c],["__file","03.html.vue"]]);export{h as default};
